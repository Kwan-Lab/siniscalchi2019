function [ blocks ] = flex_getBlockData( sessionData, trialData )
% % getBlockData % %
%PURPOSE: Retrieve block and trial data specific to the flexibility task.
%AUTHORS: MJ Siniscalchi 161212.
%         modified by AC Kwan 170515
%
%INPUT ARGUMENTS
%   sessionData:    Structure generated by calling flex_getSessionData().
%   trialData:      Structure generated by calling flex_getSessionData().
%
%OUTPUT VARIABLES
%   blocks:         Fields: 
%                   {firstTrial, nTrials, ...
%                   hit, err_p, err_o, miss, ...
%                   contingType, ruleType}. 

%CODES FROM NBS PRESENTATION
[STIM, RESP, OUTCOME, EVENT] = flex_getPresentationCodes(sessionData.presCodeSet);
blocks.presCodeSet = sessionData.presCodeSet;

%GET nSWITCHES, BLOCKTYPES, nTRIALS
nTrials = sessionData.nTrials;

idx.sound = find(ismember(trialData.cue,[STIM.sound_UPSWEEP,STIM.sound_DNSWEEP])); %Rule inferred from cue code  
idx.actionL = find(ismember(trialData.cue,[STIM.left_UPSWEEP,STIM.left_DNSWEEP])); 
idx.actionR = find(ismember(trialData.cue,[STIM.right_UPSWEEP,STIM.right_DNSWEEP])); 
idx.reversal = find(ismember(trialData.cue,[STIM.reversal_UPSWEEP,STIM.reversal_DNSWEEP])); 

lastTrial.sound = idx.sound(diff([idx.sound; nTrials+1])~=1);   %Last trial pre-switch for each block, by rule
lastTrial.actionL = idx.actionL(diff([idx.actionL; nTrials+1])~=1);
lastTrial.actionR = idx.actionR(diff([idx.actionR; nTrials+1])~=1);
lastTrial.reversal = idx.reversal(diff([idx.reversal; nTrials+1])~=1);

switchTrial = sort(cell2mat(struct2cell(lastTrial)))+1;         %Index of lastTrial + 1 is index of firstTrial in new block

blocks.firstTrial = [1; switchTrial]; %First trial of each block

% contingency type
blocks.contingType = cell(numel(blocks.firstTrial),1);
blocks.contingType(ismember(blocks.firstTrial,idx.sound)) = {'Sound'};
blocks.contingType(ismember(blocks.firstTrial,idx.actionL)) = {'ActionL'};
blocks.contingType(ismember(blocks.firstTrial,idx.actionR)) = {'ActionR'};
blocks.contingType(ismember(blocks.firstTrial,idx.reversal)) = {'Reversal'};

% rule type (e.g., conditional or non-conditional)
blocks.ruleType = cell(numel(blocks.firstTrial),1);
blocks.ruleType(ismember(blocks.firstTrial,idx.sound)) = {'Sound-guided'};
blocks.ruleType(ismember(blocks.firstTrial,idx.actionL)) = {'Non-conditional'};
blocks.ruleType(ismember(blocks.firstTrial,idx.actionR)) = {'Non-conditional'};
blocks.ruleType(ismember(blocks.firstTrial,idx.reversal)) = {'Sound-guided'};

blocks.nTrials = diff([blocks.firstTrial; nTrials+1]); %Number trials in each block

end




