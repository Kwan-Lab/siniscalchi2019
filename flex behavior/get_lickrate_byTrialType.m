function output=get_lickrate_byTrialType(trialData,trials,trialType,edges)
% % get_lickrate_byTrialType %
%PURPOSE:   Analyze lick rate for different trial types
%AUTHORS:   AC Kwan 170518
%
%INPUT ARGUMENTS
%   trialData:  Structure generated by flex_getSessionData().
%   trials:     Structure generated by flex_getTrialMasks().
%   trialType:  The trial types (fieldnames of the trials variable)
%   edges:      The edges used for a histc() operation to get lick rate histogram
%
% To plot the output, use plot_lickrate_byTrialType().

%% save the lick rates for each block

up_leftTimes=[]; down_leftTimes=[];
up_rightTimes=[]; down_rightTimes=[];
up_rewardTimes=[]; down_rewardTimes=[];
edgeWidth=nanmean(diff(edges));

for i=1:numel(trialType)
    
    %trials belonging to specific outcome or rule type
    trialMask = trials.(trialType{i});
    
    %--- among those, trials that had upsweep stimulus
    tempMask=trialMask & trials.upsweep;

    %histogram of all left lick times = left lick rate
    temp=histc([trialData.leftlickTimes{tempMask}],edges)/sum(tempMask)/edgeWidth;   %in Hz
    if ~isempty(temp)    %if there are any such trials and licks
        up_leftTimes{i}=temp(1:end-1)';
    else                 %otherwise fill with NaN
        up_leftTimes{i}=nan(size(edges(1:end-1)'));
    end
    %number of licks on the correct side in each qualified trial
    up_leftNumLickL{i} = trialData.numLeftLick(tempMask);
    
    %histogram of all right lick times = right lick rate    
    temp=histc([trialData.rightlickTimes{tempMask}],edges)/sum(tempMask)/edgeWidth;   %in Hz
    if ~isempty(temp)    
        up_rightTimes{i}=temp(1:end-1)';
    else
        up_rightTimes{i}=nan(size(edges(1:end-1)'));
    end
    %number of licks on the correct side in each qualified trial
    up_rightNumLickR{i} = trialData.numRightLick(tempMask);
    
    %reward times
    up_rewardTimes{i}=trialData.outcomeTimes(tempMask) - trialData.cueTimes(tempMask);

    %--- among those, trials that had downsweep stimulus
    tempMask=trialMask & trials.downsweep;

    %histogram of all left lick times = left lick rate    
    temp=histc([trialData.leftlickTimes{tempMask}],edges)/sum(tempMask)/edgeWidth;   %in Hz
    if ~isempty(temp)    %if there are any such trials and licks
        down_leftTimes{i}=temp(1:end-1)';
    else                 %otherwise fill with NaN
        down_leftTimes{i}=nan(size(edges(1:end-1)'));
    end
    %number of licks in each qualified trial
    down_leftNumLickL{i} = trialData.numLeftLick(tempMask);
    
    %histogram of all right lick times = right lick rate        
    temp=histc([trialData.rightlickTimes{tempMask}],edges)/sum(tempMask)/edgeWidth;   %in Hz
    if ~isempty(temp)
        down_rightTimes{i}=temp(1:end-1)';
    else
        down_rightTimes{i}=nan(size(edges(1:end-1)'));
    end
    %number of licks in each qualified trial
    down_rightNumLickR{i} = trialData.numRightLick(tempMask);
    
    %reward times
    down_rewardTimes{i}=trialData.outcomeTimes(tempMask) - trialData.cueTimes(tempMask);

end

%%
output.trialType=trialType;

output.edges=edges;
output.up_leftTimes=up_leftTimes;
output.up_rightTimes=up_rightTimes;
output.down_leftTimes=down_leftTimes;
output.down_rightTimes=down_rightTimes;

output.up_leftNumLickL=up_leftNumLickL;
output.up_rightNumLickR=up_rightNumLickR;
output.down_leftNumLickL=down_leftNumLickL;
output.down_rightNumLickR=down_rightNumLickR;

output.up_rewardTimes=up_rewardTimes;
output.down_rewardTimes=down_rewardTimes;

end


