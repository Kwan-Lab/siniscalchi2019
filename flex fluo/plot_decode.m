function output = plot_decode(input,xtitle,tlabel)
% % plot_decode %
%PURPOSE:   Plot results from decoding analysis
%AUTHORS:   AC Kwan 170522
%
%INPUT ARGUMENTS
%   input:        Structure generated by decode_linearclassifier().
%   xtitle:       Text to put as the label for x-axis.
%   tlabel:       Text to put for figure title
%
%OUTPUT ARGUMENTS
%   output:       Structure containing analyzed results

%% setup
gray=[0.7 0.7 0.7];

if iscell(input)
    t=input{1}.decode_time;
    numTrialBack = size(input{1}.corrPred,3) - 1;
    numAddTest=numel(input{1}.corrPred_addTest);
    subtitle{1} = strjoin(input{1}.fieldname);
    for j=1:numel(input)
        for nBack = 0:numTrialBack
            corrPred(:,1,nBack+1,j)=nanmean(input{j}.corrPred(:,:,nBack+1),2);
            corrPred(:,2,nBack+1,j)=nanmean(input{j}.corrPred_randsig(:,:,nBack+1),2);
            corrPred(:,3,nBack+1,j)=nanmean(input{j}.corrPred_scram(:,:,nBack+1),2);
            for k=1:numAddTest
                corrPred_addTest{k}(:,1,nBack+1,j)=nanmean(input{j}.corrPred_addTest{k}(:,:,nBack+1),2);
                corrPred_addTest{k}(:,2,nBack+1,j)=nanmean(input{j}.corrPred_addTest_randsig{k}(:,:,nBack+1),2);
                corrPred_addTest{k}(:,3,nBack+1,j)=nanmean(input{j}.corrPred_addTest_scram{k}(:,:,nBack+1),2);
                subtitle{k+1} = strjoin(input{1}.fieldname_addTest{k});
            end
        end
    end
else
    t=input.decode_time;
    numTrialBack = size(input.corrPred,3) - 1;
    numAddTest=numel(input.corrPred_addTest);
    subtitle{1} = strjoin(input.fieldname);
    for nBack = 0:numTrialBack
        corrPred(:,1,nBack+1)=nanmean(input.corrPred(:,:,nBack+1),2);
        corrPred(:,2,nBack+1)=nanmean(input.corrPred_randsig(:,:,nBack+1),2);
        corrPred(:,3,nBack+1)=nanmean(input.corrPred_scram(:,:,nBack+1),2);
        for k=1:numAddTest
            corrPred_addTest{k}(:,1,nBack+1)=nanmean(input.corrPred_addTest{k}(:,:,nBack+1),2);
            corrPred_addTest{k}(:,2,nBack+1)=nanmean(input.corrPred_addTest_randsig{k}(:,:,nBack+1),2);
            corrPred_addTest{k}(:,3,nBack+1)=nanmean(input.corrPred_addTest_scram{k}(:,:,nBack+1),2);
            subtitle{k+1} = strjoin(input.fieldname_addTest{k});
        end
    end
end

maxY = 100;
minY = 40;

%% plot results

figure;

for kk=1:numAddTest+1
    if kk==1
        temp = corrPred; col='k';
        temp_baseline = corrPred; col_baseline=[0.5 0.5 1];
    else
        if kk-1 <= numAddTest
            temp = corrPred_addTest{kk-1}; col='k';
        else
            return;
        end
    end
    
    for nBack = 0:numTrialBack
        subplot(2,4,2*(kk-1)+nBack+1); hold on;
        %plot baseline (result in Panel 1) for comparison purposes
        if kk>1
            plot(t,100*nanmean(temp_baseline(:,1,nBack+1,:),4),'.-','Color',col_baseline,'MarkerSize',30,'LineWidth',3);
            for ll=1:numel(t)
                plot(t(ll)*[1 1],100*nanmean(temp_baseline(ll,1,nBack+1,:))+100*nanstd(temp_baseline(ll,1,nBack+1,:))/sqrt(size(temp_baseline,4))*[-1 1],'-','Color',col_baseline,'LineWidth',3);
            end
        end
        %plot decoding results based on scrambled events
        plot(t,100*nanmean(temp(:,3,nBack+1,:),4),[col '--'],'MarkerSize',30,'LineWidth',3);
        for ll=1:numel(t)
            plot(t(ll)*[1 1],100*nanmean(temp(ll,3,nBack+1,:))+100*nanstd(temp(ll,3,nBack+1,:))/sqrt(size(temp,4))*[-1 1],[col '-'],'LineWidth',3);
        end
        %plot decoding results
        plot(t,100*nanmean(temp(:,1,nBack+1,:),4),[col '.-'],'MarkerSize',30,'LineWidth',3);
        for ll=1:numel(t)
            plot(t(ll)*[1 1],100*nanmean(temp(ll,1,nBack+1,:))+100*nanstd(temp(ll,1,nBack+1,:))/sqrt(size(temp,4))*[-1 1],[col '-'],'LineWidth',3);
        end
        plot([0 0],[0 100],'k','LineWidth',1);
        xlim([t(1) t(end)]);
        ylim([minY maxY]);
        xlabel(xtitle);
        if nBack == 0
            ylabel('Decoding accuracy (%)');
            title({tlabel;char(subtitle{kk})},'interpreter','none');
        end
        
        % identifying significant points
        pvalThresh=0.05;
        
        if sum(~isnan(temp(:))) > 0   %if there are some valid data
            %non-parametric test
            sig_scram=[];
            sig_baseline=[];
            for ll=1:numel(t)
                [p,~]=signrank(squeeze(temp(ll,1,nBack+1,:)),squeeze(temp(ll,3,nBack+1,:)));  %comparison with _scram
                sig_scram(ll)=p;
                [p,~]=signrank(squeeze(temp(ll,1,nBack+1,:)),squeeze(temp_baseline(ll,1,nBack+1,:)));  %comparison with baseline
                sig_baseline(ll)=p;
            end
            
            %plot a horizontal line for significant portion
            dt=nanmean(diff(t));
            for ll=1:numel(t)
                if sig_scram(ll)<pvalThresh
                    plot(t(ll)+dt*[-0.5 0.5],[0.95*maxY 0.95*maxY],[col '-'],'LineWidth',5);
                end
                if sig_baseline(ll)<pvalThresh
                    plot(t(ll)+dt*[-0.5 0.5],[0.9*maxY 0.9*maxY],'-','Color',col_baseline,'LineWidth',5);
                end
            end
        end
        
        % calculate mean decoding accuracy across all time points
        AUC(nBack+1,:,kk) = 100*squeeze(nanmean(temp(:,1,nBack+1,:),1));  %mean accuracy for data
        AUC_shuffle(nBack+1,:,kk) = 100*squeeze(nanmean(temp(:,3,nBack+1,:),1));  %mean accuracy for shuffle
        
    end
end
print(gcf,tlabel,'-dpng');    %png format
saveas(gcf,tlabel, 'fig');
print(gcf,tlabel,'-depsc','-painters');   %eps format

%% plot another figure, summarize results from across experiments

if iscell(input)  %only plot if there are multiple experiments
    
    % sum across the different trial back
    AUC_all = squeeze(nanmean(AUC,1));
    AUC_shuffle_all = squeeze(nanmean(AUC_shuffle,1));
    if numAddTest == 0
        AUC_all = AUC_all';
        AUC_shuffle_all = AUC_shuffle_all';
    end
    
    figure;
    
    subplot(2,2,1); hold on;
    for kk=1:numAddTest+1
        plot(kk-0.25+0.5*rand(1,numel(AUC_all(:,kk))),AUC_all(:,kk),'^','Color',gray,'MarkerSize',10,'LineWidth',2,'Color',gray);
        plot([kk-0.25 kk+0.25],nanmean(AUC_all(:,kk)*[1 1]),'k-','LineWidth',3);  %mean
        plot(kk*[1 1],nanmean(AUC_all(:,kk))+nanstd(AUC_all(:,kk))/sqrt(numel(AUC_all(:,kk)))*[-1 1],'k-','LineWidth',3);  %sem
        
        plot([kk-0.5 kk+0.5],nanmean(AUC_shuffle(:,kk)*[1 1]),'k--','LineWidth',3);  %mean
        
    end
    xlim([0 5]);
    ylim([35 85]);
    ylabel('Mean decoding accuracy (%)');
    set(gca,'xtick',1:numAddTest+1);
    set(gca,'xticklabel',subtitle);
    
    print(gcf,[tlabel '-AUC'],'-dpng');    %png format
    saveas(gcf,[tlabel '-AUC'], 'fig');
    print(gcf,[tlabel '-AUC'],'-depsc','-painters');   %eps format
    
%     signrank(AUC_all(:,1),AUC_all(:,2))
%     signrank(AUC_all(:,1),AUC_all(:,3))
%     signrank(AUC_all(:,1),AUC_all(:,4))
    
    output.AUC_all = AUC_all;
end

end
